//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eMIS_Reporting_WebAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class eMIS_MobileEntities : DbContext
    {
        public eMIS_MobileEntities()
            : base("name=eMIS_MobileEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Call> Calls { get; set; }
        public virtual DbSet<Calls_v2> Calls_v2 { get; set; }
        public virtual DbSet<COMPLAINT> COMPLAINTS { get; set; }
        public virtual DbSet<eMis_Mobile> eMis_Mobile { get; set; }
        public virtual DbSet<emis_mobile_devices> emis_mobile_devices { get; set; }
        public virtual DbSet<emis_mobile_gps> emis_mobile_gps { get; set; }
        public virtual DbSet<emis_notifications_sent> emis_notifications_sent { get; set; }
        public virtual DbSet<faultreason> faultreasons { get; set; }
        public virtual DbSet<history_store> history_store { get; set; }
        public virtual DbSet<HM_Devices> HM_Devices { get; set; }
        public virtual DbSet<HM_FaultReasons> HM_FaultReasons { get; set; }
        public virtual DbSet<HM_HandyManReadings> HM_HandyManReadings { get; set; }
        public virtual DbSet<HM_NoReadingReasons> HM_NoReadingReasons { get; set; }
        public virtual DbSet<MAPTEST> MAPTESTs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Comp> Comps { get; set; }
        public virtual DbSet<emis_mobile_comp_list> emis_mobile_comp_list { get; set; }
        public virtual DbSet<emis_mobile_delay_list> emis_mobile_delay_list { get; set; }
        public virtual DbSet<emis_mobile_devices_allocation> emis_mobile_devices_allocation { get; set; }
        public virtual DbSet<emis_mobile_locationlogger> emis_mobile_locationlogger { get; set; }
        public virtual DbSet<emis_mobile_standby> emis_mobile_standby { get; set; }
        public virtual DbSet<eMis_MobileH> eMis_MobileH { get; set; }
        public virtual DbSet<emis_notifications> emis_notifications { get; set; }
        public virtual DbSet<M_Dash_Totals> M_Dash_Totals { get; set; }
        public virtual DbSet<SQL_DASH> SQL_DASH { get; set; }
        public virtual DbSet<Tabi_Data> Tabi_Data { get; set; }
    
        public virtual ObjectResult<ListComplaints_Result> ListComplaints()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListComplaints_Result>("ListComplaints");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spGetAvailableDevices_Result> spGetAvailableDevices(string assignedImei)
        {
            var assignedImeiParameter = assignedImei != null ?
                new ObjectParameter("assignedImei", assignedImei) :
                new ObjectParameter("assignedImei", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableDevices_Result>("spGetAvailableDevices", assignedImeiParameter);
        }
    
        public virtual ObjectResult<spGetJobsForTownshipDeviceAssigned_Result> spGetJobsForTownshipDeviceAssigned(string township, string assignedImei)
        {
            var townshipParameter = township != null ?
                new ObjectParameter("township", township) :
                new ObjectParameter("township", typeof(string));
    
            var assignedImeiParameter = assignedImei != null ?
                new ObjectParameter("assignedImei", assignedImei) :
                new ObjectParameter("assignedImei", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJobsForTownshipDeviceAssigned_Result>("spGetJobsForTownshipDeviceAssigned", townshipParameter, assignedImeiParameter);
        }
    
        public virtual ObjectResult<spGetJobsPerDevice_Result> spGetJobsPerDevice(string supervisorImei)
        {
            var supervisorImeiParameter = supervisorImei != null ?
                new ObjectParameter("supervisorImei", supervisorImei) :
                new ObjectParameter("supervisorImei", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJobsPerDevice_Result>("spGetJobsPerDevice", supervisorImeiParameter);
        }
    
        public virtual ObjectResult<spGetJobsPerTownship_Result> spGetJobsPerTownship(string supervisorImei)
        {
            var supervisorImeiParameter = supervisorImei != null ?
                new ObjectParameter("supervisorImei", supervisorImei) :
                new ObjectParameter("supervisorImei", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJobsPerTownship_Result>("spGetJobsPerTownship", supervisorImeiParameter);
        }
    
        public virtual ObjectResult<spGetJobsPerTownshipDevice_Result> spGetJobsPerTownshipDevice(string supervisorImei, string township)
        {
            var supervisorImeiParameter = supervisorImei != null ?
                new ObjectParameter("supervisorImei", supervisorImei) :
                new ObjectParameter("supervisorImei", typeof(string));
    
            var townshipParameter = township != null ?
                new ObjectParameter("township", township) :
                new ObjectParameter("township", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJobsPerTownshipDevice_Result>("spGetJobsPerTownshipDevice", supervisorImeiParameter, townshipParameter);
        }
    
        public virtual ObjectResult<spGetJobsPerTownshipDeviceAssigned_Result> spGetJobsPerTownshipDeviceAssigned(string supervisorImei, string township, string assignedImei)
        {
            var supervisorImeiParameter = supervisorImei != null ?
                new ObjectParameter("supervisorImei", supervisorImei) :
                new ObjectParameter("supervisorImei", typeof(string));
    
            var townshipParameter = township != null ?
                new ObjectParameter("township", township) :
                new ObjectParameter("township", typeof(string));
    
            var assignedImeiParameter = assignedImei != null ?
                new ObjectParameter("assignedImei", assignedImei) :
                new ObjectParameter("assignedImei", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJobsPerTownshipDeviceAssigned_Result>("spGetJobsPerTownshipDeviceAssigned", supervisorImeiParameter, townshipParameter, assignedImeiParameter);
        }
    
        public virtual ObjectResult<spGetJobsPerTownshipForDevice_Result> spGetJobsPerTownshipForDevice(string assignedImei)
        {
            var assignedImeiParameter = assignedImei != null ?
                new ObjectParameter("assignedImei", assignedImei) :
                new ObjectParameter("assignedImei", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJobsPerTownshipForDevice_Result>("spGetJobsPerTownshipForDevice", assignedImeiParameter);
        }
    
        public virtual ObjectResult<spJobControl_Result1> spJobControl(string department, string municipality)
        {
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var municipalityParameter = municipality != null ?
                new ObjectParameter("Municipality", municipality) :
                new ObjectParameter("Municipality", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJobControl_Result1>("spJobControl", departmentParameter, municipalityParameter);
        }
    
        public virtual ObjectResult<spUpdateJob_Result> spUpdateJob(Nullable<int> controlNumber, string comments, string assignedImei)
        {
            var controlNumberParameter = controlNumber.HasValue ?
                new ObjectParameter("controlNumber", controlNumber) :
                new ObjectParameter("controlNumber", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var assignedImeiParameter = assignedImei != null ?
                new ObjectParameter("assignedImei", assignedImei) :
                new ObjectParameter("assignedImei", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdateJob_Result>("spUpdateJob", controlNumberParameter, commentsParameter, assignedImeiParameter);
        }

        public System.Data.Entity.DbSet<eMIS_Reporting_WebAPI.Models.spJobControl_Result1> spJobControl_Result1 { get; set; }
    }
}
